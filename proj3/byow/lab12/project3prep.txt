Q: Can you think of an analogy between the process of tesselating hexagons and randomly generating a world using rooms and hallways? 
What is the hexagon and what is the tesselation on the Project 3 side?

A: Yes, we can use the same idea so that our rooms don't get overlapped. This opens to more clever ideas of how to approach
the problem creating and connecting rooms on project 3. The hexagons in this lab correspond to the rooms, and
the tesselation correspond to the process of generating and connecting adjacent rooms and hallways

-----
Q: If you were to start working on world generation, what kind of method would you think of writing first? 
Think back to the lab and the process used to eventually get to tesselating hexagons.

A: I would start by creating a Room class and a Position class, then I would generate methods for the Romm class
such as getWidth,getHeight, get location, get doors, etc. The I would try to generate hallways who would use
the doors of origin and destination to generate the hallways. Another approach is just to cluster rooms and hallways
together and open random door where the intersect.

-----
Q: What distinguishes a hallway from a room? How are they similar?

A: A hallway an be tough of a long room of width 1. They can be horizontal or vertical, and they are located between two
or more rooms. I am still wondering if we ca have intersecting hallways.

-----
Q: For tesselating hexagons, one of the hardest parts is figuring out where to place each hexagon/how to easily place hexagons on screen in an algorithmic way. 
After looking at your own implementation, consider the implementation provided near the end of the lab.
How did your implementation differ from the given one? What lessons can be learned from it?

A: My approach was a bit different because I used a series of nested loop to generate rows and then columns.
I learned that there are similar ways to do things, but implementation approaches can differ significantly.

-----
Q: Consider an algorithm for placing rooms and hallways on your map. 
Ideally, consider many algorithms and think about what makes some easier or harder to implement. Try and bring those ideas together into a single simple algorithm which accomplishes the task. 
In general, algorithms with as few edge cases as possible are better algorithms.

A: I was considering creating a graph out of the rooms and then setting each room as a node and use A* to create a
minimum spanning tree and try to connect them but I guess that approach is difficult. Another idea is to randomly generate
paths from specified doors to find random paths but it would generate really messy worlds. I need to research more about
dungeon room-paths generator algorithms.